{
	"info": {
		"_postman_id": "bde699ee-45e9-44e6-af28-86599d7ee66a",
		"name": "PetStore",
		"description": "This is a sample server Petstore server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "14878406-bde699ee-45e9-44e6-af28-86599d7ee66a"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "AddPet",
					"item": [
						{
							"name": "addPet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b783f66-6676-478f-a804-cb571ce1d977",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response id is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.id).to.eql(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet status is available\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.status).to.eql('available');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name field\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('name');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Pet name is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.name).to.eql('finch');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains chaffinch tag\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.tags).to.deep.include({id: 13, name: 'chaffinch'});\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Name</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.name}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "610c36a8-a3df-46c4-b2f7-d87a6a44e707",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 8830,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"bird\"\r\n  },\r\n  \"name\": \"finch\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "addPetInvalidInput",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6146523f-a0a0-422d-b5c0-6486097ed74b",
										"exec": [
											"pm.test(\"Invalid input should return 405\", function () {\r",
											"  if (pm.response.code !== 405) {\r",
											"    console.warn('Warning: Invalid input did not return 405 as expected');\r",
											"  }\r",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 405]);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tag ID</th>\r",
											"        <th>Tag Name</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.category.id}}</td>\r",
											"        <td>{{response.category.name}}</td>\r",
											"        <td>{{response.photoUrls}}</td>\r",
											"        <td>{{response.tags.0.id}}</td>\r",
											"        <td>{{response.tags.0.name}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3f29cf85-a44a-4861-baee-2b8f6200b35f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"id\": 8831,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"bird\"\r\n  },\r\n  \r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					],
					"id": "5fff6b36-3c0f-4953-8de1-c3991826ac05"
				},
				{
					"name": "UploadImadge",
					"item": [
						{
							"name": "UploadImage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9f6049-1533-4c9e-b4df-aae317d793e9",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has type key\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('type');\r",
											"});\r",
											"\r",
											"pm.test(\"Response type is unknown\", function () {\r",
											"    pm.expect(pm.response.json().type).to.equal(\"unknown\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message key\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test(\"Response message contains additionalMetadata\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"additionalMetadata\");\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return { response: pm.response.json() }\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d89a65a1-6116-47cb-a1d6-5046344db81b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "image png",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
											"filesNotInWorkingDirectory": [
												"/C:/Users/1/Downloads/kartinki-zyabliki-1.jpg"
											],
											"src": "postman-cloud:///1eedcc7a-b476-46d0-964a-e22730b38f04"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/8830/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830",
										"uploadImage"
									]
								}
							},
							"response": []
						}
					],
					"id": "e5dec24b-e804-4310-8488-1a1d078b4b50"
				},
				{
					"name": "FindByStatus",
					"item": [
						{
							"name": "petFindByStatusPending",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "148cb8b7-a225-4d85-80d7-c278a6ef6dd7",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"pending\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fac7abd0-ebb9-4c40-8070-d49201d43e1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1c7cf4c-920d-4073-9649-b4071e750c07",
										"exec": [
											"pm.test('Response status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is sold\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].status).to.eql(\"sold\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('id')) {\r",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Name should be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('name')) {\r",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    \r",
											"    {{#each response}}\r",
											"        <tr>\r",
											"            <td>{{id}}</td>\r",
											"            <td>{{category.id}}</td>\r",
											"            <td>{{category.name}}</td>\r",
											"            <td>{{name}}</td>\r",
											"            <td>{{photoUrls}}</td>\r",
											"            <td>{{tags}}</td>\r",
											"            <td>{{status}}</td>\r",
											"        </tr>\r",
											"    {{/each}}\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "576fe999-5c6b-4d9f-8031-ed5532be061c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73747b74-5804-4319-bab3-2f7accc86f06",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"available\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('id')) {",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");",
											"        }",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a32c01e6-08db-481e-a214-940735796acb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f24d5ad-62d2-4bb8-aca2-578486025cca",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or sold\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"sold\", \"Status should be pending or sold\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tags</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.[0].name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5467f795-16d0-49f6-8aaa-e620d96b19ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f377a19-9a18-4362-a85a-bce405ff605e",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or available\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"available\", \"Status should be pending or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tag ID</th>",
											"        <th>Tag Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.0.id}}</td>",
											"            <td>{{tags.0.name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6379a066-d135-49be-b8dc-84e941b6168e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSoldAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83f692f7-1e04-4371-b54a-14824737cd49",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is sold or available\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"sold\" || status === \"available\", \"Status should be pending or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return { response: pm.response.json() }",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d183d388-4b18-4103-b8f7-5f456feb8470",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAlive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efe84e16-c7a9-4509-abe5-d8635986a12a",
										"exec": [
											"pm.test('Response status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "69ee2ef9-1d49-4742-8601-d2982d6b1a7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=alive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "alive"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "bd6ed8eb-f5f2-46f6-94a3-0ff241f5002d"
				},
				{
					"name": "FindByID",
					"item": [
						{
							"name": "findByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5d22020-d141-4b53-bc03-5412dc8001d4",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.category).to.exist;\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.photoUrls).to.exist;\r",
											"    pm.expect(responseData.tags).to.exist;\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category name is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"PhotoUrls array should not be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.photoUrls).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Tags array contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.category.id}}</td>\r",
											"        <td>{{response.category.name}}</td>\r",
											"        <td>{{response.name}}</td>\r",
											"        <td>{{response.photoUrls}}</td>\r",
											"        <td>{{response.tags}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9161ab74-9ef3-4dd4-96d2-7bc1ce4703f4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByIncorrectID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b122472-4ca1-48ea-95b9-7b5af2d8943a",
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('code');\r",
											"    pm.expect(responseData).to.have.property('type');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "afee7fab-6312-49f5-98b1-c75149d081a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/1111111111111111",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"1111111111111111"
									]
								}
							},
							"response": []
						}
					],
					"id": "bbc91d53-f486-48a2-84fb-75968291bc18"
				},
				{
					"name": "UpdatePet",
					"item": [
						{
							"name": "UpdatePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "738d86d6-cdc5-4266-948c-31694b9e7105",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response id is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.id).to.eql(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet status is available\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.status).to.eql('available');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name field\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('name');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Pet name is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.name).to.eql('finch');\r",
											"});\r",
											"\r",
											"pm.test(\"Category name is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.name).to.eql('firefly');\r",
											"});\r",
											"\r",
											"pm.test(\"Category ID is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.id).to.eql(13);\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{id}}</td>\r",
											"        <td>{{category.id}}</td>\r",
											"        <td>{{category.name}}</td>\r",
											"        <td>{{name}}</td>\r",
											"        <td>{{photoUrls}}</td>\r",
											"        <td>{{tags}}</td>\r",
											"        <td>{{status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c2d7800a-368c-42fb-9e07-caa90cf85e01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 8830,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"firefly\"\r\n  },\r\n  \"name\": \"finch\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					],
					"id": "a21ba64d-e48e-43d8-8db5-404fd2ff94df"
				},
				{
					"name": "UpdatePetFromData",
					"item": [
						{
							"name": "UpdatePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96427a85-bd29-4437-b4ea-36eb4e85b8d2",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.message).to.equal(\"8830\");\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"  return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5014b6b4-32a7-4819-a448-ad257f7abf52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "redfinch",
											"type": "text"
										},
										{
											"key": "status",
											"value": "sold",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cc3ccf6-0c06-4209-9b2c-8e87671b658d",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.id).to.equal(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Category ID is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.category.id).to.equal(13);\r",
											"});\r",
											"\r",
											"pm.test(\"Category name is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.category.name).to.equal(\"firefly\");\r",
											"});\r",
											"\r",
											"pm.test(\"Name is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.name).to.equal(\"redfinch\");\r",
											"});\r",
											"\r",
											"pm.test(\"Photo URL is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.photoUrls[0]).to.equal(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Tag ID is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.tags[0].id).to.equal(13);\r",
											"});\r",
											"\r",
											"pm.test(\"Tag name is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.tags[0].name).to.equal(\"chaffinch\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.status).to.equal(\"sold\");\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "199c0021-d70a-41b2-8a32-442afdf4a306",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						}
					],
					"id": "d5c24ac2-3552-4443-a8ba-61835e24472e"
				},
				{
					"name": "DeletePet",
					"item": [
						{
							"name": "DeletePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20ccc5d2-2ce4-4cbb-b192-d3a45208e134",
										"exec": [
											"pm.test(\"Code is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.message).to.equal(\"8830\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "57cf8cbc-070e-4227-8306-03c8711202a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "special-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "727f2ffa-4493-4203-ba03-202e7c534cfb",
										"exec": [
											"pm.test(\"Code is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.code).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Type is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.type).to.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.message).to.equal(\"Pet not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "41f11d3a-4af5-46d3-85fd-ea59f8c6cad4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						}
					],
					"id": "31b465c4-70e0-4b75-a994-77be52d1fed4"
				}
			],
			"id": "f923c31b-ec3c-44fb-8b87-4478f8e4fb48",
			"description": "Everything about your Pets."
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "AddOrder",
					"item": [
						{
							"name": "AddOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73cea04d-bf76-482d-adb6-d36756588956",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"ID field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('petId');\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('quantity');\r",
											"});\r",
											"\r",
											"pm.test(\"Ship date field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('shipDate');\r",
											"});\r",
											"\r",
											"pm.test(\"Status field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status field is present\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('complete');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.id).to.equal(1519);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.petId).to.equal(8);\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.quantity).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.status).to.equal(\"placed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status is correct\", function () {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.complete).to.equal(true);\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Pet ID</th>\r",
											"        <th>Quantity</th>\r",
											"        <th>Ship Date</th>\r",
											"        <th>Status</th>\r",
											"        <th>Complete</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.petId}}</td>\r",
											"        <td>{{response.quantity}}</td>\r",
											"        <td>{{response.shipDate}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"        <td>{{response.complete}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "57c0b245-4833-40ef-b009-e448930d79c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						}
					],
					"id": "c5d70c7f-a82a-4665-b9b2-e83d8d2c6d83"
				}
			],
			"id": "9862cfb6-d957-417e-b9f2-fcd1166cdc90",
			"description": "Access to Petstore orders."
		},
		{
			"name": "User",
			"item": [],
			"id": "4fd0e960-652c-492a-9430-b49a2bff4909",
			"description": "Operations about user."
		}
	]
}