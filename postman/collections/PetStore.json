{
	"info": {
		"_postman_id": "7e7b6fc4-1d70-4ed7-bdf6-f79fc2446fd7",
		"name": "PetStore",
		"description": "This is a sample server Petstore server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "14878406-7e7b6fc4-1d70-4ed7-bdf6-f79fc2446fd7"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "AddPet",
					"item": [
						{
							"name": "addPet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b09709a4-8306-4888-80fc-328fb82fd1dc",
										"exec": [
											"\r",
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=critical\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=Add Pet\r",
											"// @allure.story=RetrievePetInfo\r",
											"// @allure.description=Verify pet information retrieval and response structure\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  // @allure.label.tag=StatusCode\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    // @allure.label.tag=ContentType\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"  // @allure.label.tag=ResponseBody\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"  // @allure.label.tag=IdField\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response id is correct\", function () {\r",
											"  // @allure.label.tag=IdValue\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.id).to.eql(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet status is available\", function () {\r",
											"  // @allure.label.tag=PetStatus\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.status).to.eql('available');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name field\", function () {\r",
											"  // @allure.label.tag=NameField\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet name is correct\", function () {\r",
											"  // @allure.label.tag=NameValue\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.name).to.eql('finch');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains chaffinch tag\", function () {\r",
											"  // @allure.label.tag=PetTag\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.tags).to.deep.include({id: 13, name: 'chaffinch'});\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Name</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.name}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a917a63-4050-4ee0-9636-5293fc45ec1f",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8ff54472-5487-441a-9121-e10d2b0b71a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 8830,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"bird\"\r\n  },\r\n  \"name\": \"finch\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "addPetInvalidInput",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "626e52a6-69ed-4336-b12b-9d0eb640e109",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=critical\r",
											"// @allure.label.tag=ErrorHandling\r",
											"// @allure.feature=InputValidation\r",
											"// @allure.story=InvalidInputHandling\r",
											"// @allure.description=Verify that invalid input returns 405 status code or handles gracefully\r",
											"pm.test(\"Invalid input should return 405\", function () {\r",
											"  // @allure.step=Check response status code\r",
											"  if (pm.response.code !== 405) {\r",
											"    // @allure.attachment.type=text/plain\r",
											"    // @allure.attachment.name=UnexpectedStatusCode\r",
											"    console.warn('Warning: Invalid input did not return 405 as expected');\r",
											"  }\r",
											"  // @allure.step=Verify status code is either 200 or 405\r",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 405]);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tag ID</th>\r",
											"        <th>Tag Name</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.category.id}}</td>\r",
											"        <td>{{response.category.name}}</td>\r",
											"        <td>{{response.photoUrls}}</td>\r",
											"        <td>{{response.tags.0.id}}</td>\r",
											"        <td>{{response.tags.0.name}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "afa23c36-5ee6-48f5-b04b-b0a87978cab7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"id\": 8831,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"bird\"\r\n  },\r\n  \r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					],
					"id": "f701c466-be5c-4c3d-abd7-8981e003238f"
				},
				{
					"name": "UploadImadge",
					"item": [
						{
							"name": "UploadImage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0f277ae-f56b-4a23-81c8-175913f98cf0",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=minor\r",
											"// @allure.label.tag=SkippedTests\r",
											"// @allure.feature=ResponseValidation\r",
											"// @allure.story=SkippedResponseChecks\r",
											"// @allure.description=Verify various aspects of the response (currently skipped)\r",
											"\r",
											"pm.test.skip(\"Response status code is 200\", function () {\r",
											"  // @allure.step=Check response status code\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test.skip(\"Response Content-Type header is application/json\", function () {\r",
											"  // @allure.step=Verify Content-Type header\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test.skip(\"Response has type key\", function () {\r",
											"  // @allure.step=Check presence of 'type' key in response\r",
											"  pm.expect(pm.response.json()).to.have.property('type');\r",
											"});\r",
											"\r",
											"pm.test.skip(\"Response type is unknown\", function () {\r",
											"  // @allure.step=Verify 'type' value in response\r",
											"  pm.expect(pm.response.json().type).to.equal(\"unknown\");\r",
											"});\r",
											"\r",
											"pm.test.skip(\"Response has message key\", function () {\r",
											"  // @allure.step=Check presence of 'message' key in response\r",
											"  pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test.skip(\"Response message contains additionalMetadata\", function () {\r",
											"  // @allure.step=Verify 'message' content in response\r",
											"  pm.expect(pm.response.json().message).to.include(\"additionalMetadata\");\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return { response: pm.response.json() }\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fcad8ee9-7410-4dca-9d1c-61087a3f9805",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "image png",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
											"filesNotInWorkingDirectory": [
												"/C:/Users/1/Downloads/kartinki-zyabliki-1.jpg"
											],
											"src": "postman-cloud:///1eedcc7a-b476-46d0-964a-e22730b38f04"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/8830/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830",
										"uploadImage"
									]
								}
							},
							"response": []
						}
					],
					"id": "d96184c7-8758-4414-8736-a56fec8afcbe"
				},
				{
					"name": "FindByStatus",
					"item": [
						{
							"name": "petFindByStatusPending",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f87eeab-dd65-43e0-8eae-6ed927636377",
										"exec": [
											"// @allure.label.owner=QAEngineer",
											"// @allure.label.severity=normal",
											"// @allure.label.tag=PetAPI",
											"// @allure.feature=PetStoreAPI",
											"// @allure.story=RetrievePendingPets",
											"// @allure.description=Verify the response structure and content for pending pets",
											"",
											"pm.test('Response status code is 200', function () {",
											"    // @allure.step=Check response status code",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    // @allure.step=Verify Content-Type header",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    // @allure.step=Check response time",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending\", function () {",
											"    // @allure.step=Verify pet status",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"pending\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    // @allure.step=Validate pet ID",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        // @allure.step=Check ID for pet {pet.id}",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    // @allure.step=Validate pet name",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            // @allure.step=Check name for pet {pet.id}",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c206059b-2cb8-4681-abfe-40d5199c6f74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c443f43-c8b2-4388-a8f2-02891716ff34",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    // @allure.step=Verify Content-Type header\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    // @allure.step=Check response time\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is sold\", function () {\r",
											"    // @allure.step=Verify pet status\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].status).to.eql(\"sold\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id is a non-negative integer\", function () {\r",
											"    // @allure.step=Validate pet ID\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('id')) {\r",
											"            // @allure.step=Check ID for pet {pet.id}\r",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Name should be a non-empty string\", function () {\r",
											"    // @allure.step=Validate pet name\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('name')) {\r",
											"            // @allure.step=Check name for pet {pet.id}\r",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    \r",
											"    {{#each response}}\r",
											"        <tr>\r",
											"            <td>{{id}}</td>\r",
											"            <td>{{category.id}}</td>\r",
											"            <td>{{category.name}}</td>\r",
											"            <td>{{name}}</td>\r",
											"            <td>{{photoUrls}}</td>\r",
											"            <td>{{tags}}</td>\r",
											"            <td>{{status}}</td>\r",
											"        </tr>\r",
											"    {{/each}}\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cce0c77a-7dfb-4ec4-be5e-c16dff0ae48b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc5e9adb-99c2-40ef-aed6-80c964854569",
										"exec": [
											"// @allure.label.owner=QAEngineer",
											"// @allure.label.severity=normal",
											"// @allure.label.tag=PetAPI",
											"// @allure.feature=PetStoreAPI",
											"// @allure.story=RetrieveSoldPets",
											"// @allure.description=Verify the response structure and content for sold pets",
											"",
											"pm.test('Response status code is 200', function () {",
											"    // @allure.step=Check response status code",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    // @allure.step=Verify Content-Type header",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    // @allure.step=Check response time",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is sold\", function () {",
											"    // @allure.step=Verify pet status",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"sold\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    // @allure.step=Validate pet ID",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('id')) {",
											"            // @allure.step=Check ID for pet {pet.id}",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");",
											"        }",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    // @allure.step=Validate pet name",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            // @allure.step=Check name for pet {pet.id}",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eb651bb0-5f4d-4055-a6ed-c6c4a74752ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d318ea5a-afb8-48e0-a0c5-b5f4c4ab818c",
										"exec": [
											"// @allure.label.owner=QAEngineer",
											"// @allure.label.severity=normal",
											"// @allure.label.tag=PetAPI",
											"// @allure.feature=PetStoreAPI",
											"// @allure.story=RetrieveSoldPets",
											"// @allure.description=Verify the response structure and content for sold pets",
											"",
											"pm.test('Response status code is 200', function () {",
											"    // @allure.step=Check response status code",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    // @allure.step=Verify Content-Type header",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    // @allure.step=Check response time",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or sold\", function () {",
											"    // @allure.step=Verify pet status",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"sold\", \"Status should be pending or sold\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    // @allure.step=Validate pet ID",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        // @allure.step=Check ID for pet {pet.id}",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    // @allure.step=Validate pet name",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            // @allure.step=Check name for pet {pet.id}",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"",
											"var template = `",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tags</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.[0].name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d663d05a-a8d5-421f-b32a-c457b4299790",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97cfbce3-0d35-4349-af9c-b6679a54f222",
										"exec": [
											"// @allure.label.owner=QAEngineer",
											"// @allure.label.severity=normal",
											"// @allure.label.tag=PetAPI",
											"// @allure.feature=PetStoreAPI",
											"// @allure.story=RetrieveSoldPets",
											"// @allure.description=Verify the response structure and content for sold pets",
											"",
											"pm.test('Response status code is 200', function () {",
											"    // @allure.step=Check response status code",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    // @allure.step=Verify Content-Type header",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    // @allure.step=Check response time",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or available\", function () {",
											"    // @allure.step=Verify pet status",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"available\", \"Status should be pending or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    // @allure.step=Validate pet ID",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        // @allure.step=Check ID for pet {pet.id}",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    // @allure.step=Validate pet name",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            // @allure.step=Check name for pet {pet.id}",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tag ID</th>",
											"        <th>Tag Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.0.id}}</td>",
											"            <td>{{tags.0.name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1b4f5290-a3e8-48eb-b4af-d9e48ee26ab0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSoldAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ede4002f-6915-407d-a9f6-60d6a0d4b39d",
										"exec": [
											"// @allure.label.owner=QAEngineer",
											"// @allure.label.severity=normal",
											"// @allure.label.tag=PetAPI",
											"// @allure.feature=PetStoreAPI",
											"// @allure.story=RetrieveSoldPets",
											"// @allure.description=Verify the response structure and content for sold pets",
											"",
											"pm.test('Response status code is 200', function () {",
											"    // @allure.step=Check response status code",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    // @allure.step=Verify Content-Type header",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    // @allure.step=Check response time",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is sold or available\", function () {",
											"    // @allure.step=Verify pet status",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"sold\" || status === \"available\", \"Status should be sold or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    // @allure.step=Validate pet ID",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        // @allure.step=Check ID for pet {pet.id}",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    // @allure.step=Validate pet name",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            // @allure.step=Check name for pet {pet.id}",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return { response: pm.response.json() }",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a1f2de7e-ba90-4966-a1bf-7a358637aa7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAlive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbd6e7db-1a85-47d5-93c7-40614999eefa",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    // @allure.step=Verify Content-Type header\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    // @allure.step=Check response time\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9a51b03f-8063-49f7-83ae-404daa5bc07a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=alive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "alive"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b350dbb3-5124-4602-9cee-3a5f4d712008"
				},
				{
					"name": "FindByID",
					"item": [
						{
							"name": "findByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69e6b5b5-f2f1-4941-bbc6-b390185016b4",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    // @allure.step=Check response time\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    // @allure.step=Validate response structure\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.category).to.exist;\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.photoUrls).to.exist;\r",
											"    pm.expect(responseData.tags).to.exist;\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Category name is a non-empty string\", function () {\r",
											"    // @allure.step=Validate category name\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"PhotoUrls array should not be empty\", function () {\r",
											"    // @allure.step=Validate photoUrls array\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.photoUrls).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Tags array contains at least one element\", function () {\r",
											"    // @allure.step=Validate tags array\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.category.id}}</td>\r",
											"        <td>{{response.category.name}}</td>\r",
											"        <td>{{response.name}}</td>\r",
											"        <td>{{response.photoUrls}}</td>\r",
											"        <td>{{response.tags}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b6e0c7e9-1c37-44f9-a0bb-7101a294e0d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByIncorrectID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "961b59f4-2656-4cfd-9d63-b561bbdd2abc",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 404', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    // @allure.step=Verify Content-Type header\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
											"    // @allure.step=Validate response structure\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('code');\r",
											"    pm.expect(responseData).to.have.property('type');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"    // @allure.step=Validate type field\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    // @allure.step=Validate message field\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d6b9c470-0531-4294-86b9-111eb0c1653e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/1111111111111111",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"1111111111111111"
									]
								}
							},
							"response": []
						}
					],
					"id": "d219979d-682b-4cb2-89e6-a3f8b3dfc38c"
				},
				{
					"name": "UpdatePet",
					"item": [
						{
							"name": "UpdatePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f5a1863-5d42-4249-8034-6aff1108352b",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    // @allure.step=Verify Content-Type header\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"    // @allure.step=Validate response body\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    // @allure.step=Validate id field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response id is correct\", function () {\r",
											"    // @allure.step=Validate id value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet status is available\", function () {\r",
											"    // @allure.step=Validate pet status\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql('available');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains name field\", function () {\r",
											"    // @allure.step=Validate name field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet name is correct\", function () {\r",
											"    // @allure.step=Validate pet name\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('finch');\r",
											"});\r",
											"\r",
											"pm.test(\"Category name is correct\", function () {\r",
											"    // @allure.step=Validate category name\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.name).to.eql('firefly');\r",
											"});\r",
											"\r",
											"pm.test(\"Category ID is correct\", function () {\r",
											"    // @allure.step=Validate category ID\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.id).to.eql(13);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{id}}</td>\r",
											"        <td>{{category.id}}</td>\r",
											"        <td>{{category.name}}</td>\r",
											"        <td>{{name}}</td>\r",
											"        <td>{{photoUrls}}</td>\r",
											"        <td>{{tags}}</td>\r",
											"        <td>{{status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "95511c1a-20d1-4cd1-bb20-6fa29412e1d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 8830,\r\n  \"category\": {\r\n    \"id\": 13,\r\n    \"name\": \"firefly\"\r\n  },\r\n  \"name\": \"finch\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"chaffinch\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					],
					"id": "0c5618be-771c-4079-ad19-1dc1d63fd150"
				},
				{
					"name": "UpdatePetFromData",
					"item": [
						{
							"name": "UpdatePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f988f80-c81f-4a62-9884-006c23fd799d",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    // @allure.step=Verify Content-Type header\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid body\", function () {\r",
											"    // @allure.step=Validate response body\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"8830\");\r",
											"});\r",
											"\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"  return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "180f11db-5a13-4ad9-b062-f60234926333",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "redfinch",
											"type": "text"
										},
										{
											"key": "status",
											"value": "sold",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a35a8966-e4ad-4e58-9d28-79203b213cb7",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    // @allure.step=Check response time\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"    // @allure.step=Validate pet ID\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(8830);\r",
											"});\r",
											"\r",
											"pm.test(\"Category ID is correct\", function () {\r",
											"    // @allure.step=Validate category ID\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.id).to.equal(13);\r",
											"});\r",
											"\r",
											"pm.test(\"Category name is correct\", function () {\r",
											"    // @allure.step=Validate category name\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.category.name).to.equal(\"firefly\");\r",
											"});\r",
											"\r",
											"pm.test(\"Name is correct\", function () {\r",
											"    // @allure.step=Validate pet name\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.equal(\"redfinch\");\r",
											"});\r",
											"\r",
											"pm.test(\"Photo URL is correct\", function () {\r",
											"    // @allure.step=Validate photo URL\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.photoUrls[0]).to.equal(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Tag ID is correct\", function () {\r",
											"    // @allure.step=Validate tag ID\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tags[0].id).to.equal(13);\r",
											"});\r",
											"\r",
											"pm.test(\"Tag name is correct\", function () {\r",
											"    // @allure.step=Validate tag name\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.tags[0].name).to.equal(\"chaffinch\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"    // @allure.step=Validate pet status\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"sold\");\r",
											"});\r",
											"\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4dee4810-6b5a-42b1-b055-faee9099f391",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						}
					],
					"id": "2495131c-6064-4719-aeb6-876235f976e7"
				},
				{
					"name": "DeletePet",
					"item": [
						{
							"name": "DeletePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d6f86e4-01fb-4903-a11a-fe94dda645c8",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test(\"Code is correct\", function () {\r",
											"    // @allure.step=Validate response code\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"8830\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6e17ddda-0049-49b2-b2eb-4fef477d2a0f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "special-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10b99453-21a2-4956-a27d-c8e7de0ff437",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test(\"Code is correct\", function () {\r",
											"    // @allure.step=Validate response code\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Type is correct\", function () {\r",
											"    // @allure.step=Validate response type\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.type).to.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Pet not found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b0622983-0b13-4552-a4f3-512f7d1b8993",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/8830",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"8830"
									]
								}
							},
							"response": []
						}
					],
					"id": "9582e100-679f-44ac-af07-a84bdf1d1059"
				}
			],
			"id": "3f00d6dd-f029-43b0-bcfb-6330de0dce0a",
			"description": "Everything about your Pets."
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "AddOrder",
					"item": [
						{
							"name": "AddOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76aac060-fbb0-45b4-b3a9-790290817d27",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"ID field is present\", function () {\r",
											"    // @allure.step=Validate ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID field is present\", function () {\r",
											"    // @allure.step=Validate Pet ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('petId');\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity field is present\", function () {\r",
											"    // @allure.step=Validate Quantity field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('quantity');\r",
											"});\r",
											"\r",
											"pm.test(\"Ship date field is present\", function () {\r",
											"    // @allure.step=Validate Ship Date field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('shipDate');\r",
											"});\r",
											"\r",
											"pm.test(\"Status field is present\", function () {\r",
											"    // @allure.step=Validate Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status field is present\", function () {\r",
											"    // @allure.step=Validate Complete Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('complete');\r",
											"});\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"    // @allure.step=Validate ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(1519);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID is correct\", function () {\r",
											"    // @allure.step=Validate Pet ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.petId).to.equal(8);\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity is correct\", function () {\r",
											"    // @allure.step=Validate Quantity value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantity).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"    // @allure.step=Validate Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"placed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status is correct\", function () {\r",
											"    // @allure.step=Validate Complete Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.complete).to.equal(true);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Pet ID</th>\r",
											"        <th>Quantity</th>\r",
											"        <th>Ship Date</th>\r",
											"        <th>Status</th>\r",
											"        <th>Complete</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.petId}}</td>\r",
											"        <td>{{response.quantity}}</td>\r",
											"        <td>{{response.shipDate}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"        <td>{{response.complete}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a4ae3e3-33e7-48d6-8d8f-25d7e19a00c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bd4eff7-fb89-4bb6-a057-8b66bffc1fa2",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"something bad happened\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b8669f22-eab5-44e2-ae53-e8a424fce425",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"1234q\",\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongPetID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e63d4a29-01c9-4cfa-aa09-fb738586733a",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"bad input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9fa57e2b-27d2-4afe-842c-047afcdce6fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": two,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongQuantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dae2691f-9567-4f14-8127-7f2d1d8dc674",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"bad input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2b7fdaf5-ffb5-4489-9a58-bcdb92c4cab7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": two,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongShipDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9369536-49ba-42fb-b944-e6e1e018a104",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"something bad happened\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c3085fba-3f12-4b34-af91-654bcaccaf97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"Sep 28 19:00:00 +0000\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d85ade-e955-437e-b39b-a6079f1e4e9f",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200 and no error message', function () {\r",
											"    // @allure.step=Check response status code and error message\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6de11bfe-3cfe-4fab-9586-313dc4ef5d38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"sell off\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddOrderWrongComplete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d2e8094-ec83-47cd-aa57-38546919a3d2",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"bad input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f24c50c0-2385-481f-8a39-1d64c83ca8c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": exactly\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						}
					],
					"id": "96542d61-c258-4d59-aa7e-57b1ecf03367"
				},
				{
					"name": "FindByID",
					"item": [
						{
							"name": "AddOrderCopy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5545eb20-13a4-4902-8f72-9f6ed8a15f9a",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"ID field is present\", function () {\r",
											"    // @allure.step=Validate ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID field is present\", function () {\r",
											"    // @allure.step=Validate Pet ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('petId');\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity field is present\", function () {\r",
											"    // @allure.step=Validate Quantity field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('quantity');\r",
											"});\r",
											"\r",
											"pm.test(\"Ship date field is present\", function () {\r",
											"    // @allure.step=Validate Ship Date field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('shipDate');\r",
											"});\r",
											"\r",
											"pm.test(\"Status field is present\", function () {\r",
											"    // @allure.step=Validate Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status field is present\", function () {\r",
											"    // @allure.step=Validate Complete Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('complete');\r",
											"});\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"    // @allure.step=Validate ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(1519);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID is correct\", function () {\r",
											"    // @allure.step=Validate Pet ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.petId).to.equal(8);\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity is correct\", function () {\r",
											"    // @allure.step=Validate Quantity value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantity).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"    // @allure.step=Validate Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"placed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status is correct\", function () {\r",
											"    // @allure.step=Validate Complete Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.complete).to.equal(true);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Pet ID</th>\r",
											"        <th>Quantity</th>\r",
											"        <th>Ship Date</th>\r",
											"        <th>Status</th>\r",
											"        <th>Complete</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.petId}}</td>\r",
											"        <td>{{response.quantity}}</td>\r",
											"        <td>{{response.shipDate}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"        <td>{{response.complete}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aa89acca-8c0c-4d0d-a3c7-28e4ff7f4443",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1519,\r\n  \"petId\": 8,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-03-23T12:15:07.674Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "FindByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cf2139c-b923-4d3b-bb09-80ea7f066d28",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"ID field is present\", function () {\r",
											"    // @allure.step=Validate ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID field is present\", function () {\r",
											"    // @allure.step=Validate Pet ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('petId');\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity field is present\", function () {\r",
											"    // @allure.step=Validate Quantity field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('quantity');\r",
											"});\r",
											"\r",
											"pm.test(\"Ship date field is present\", function () {\r",
											"    // @allure.step=Validate Ship Date field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('shipDate');\r",
											"});\r",
											"\r",
											"pm.test(\"Status field is present\", function () {\r",
											"    // @allure.step=Validate Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status field is present\", function () {\r",
											"    // @allure.step=Validate Complete Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('complete');\r",
											"});\r",
											"\r",
											"pm.test(\"ID is correct\", function () {\r",
											"    // @allure.step=Validate ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(1519);\r",
											"});\r",
											"\r",
											"pm.test(\"Pet ID is correct\", function () {\r",
											"    // @allure.step=Validate Pet ID value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.petId).to.equal(8);\r",
											"});\r",
											"\r",
											"pm.test(\"Quantity is correct\", function () {\r",
											"    // @allure.step=Validate Quantity value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.quantity).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is correct\", function () {\r",
											"    // @allure.step=Validate Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.equal(\"placed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Complete status is correct\", function () {\r",
											"    // @allure.step=Validate Complete Status value\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.complete).to.equal(true);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Pet ID</th>\r",
											"        <th>Quantity</th>\r",
											"        <th>Ship Date</th>\r",
											"        <th>Status</th>\r",
											"        <th>Complete</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.petId}}</td>\r",
											"        <td>{{response.quantity}}</td>\r",
											"        <td>{{response.shipDate}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"        <td>{{response.complete}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0328bb56-4683-411e-bff8-18b6134652da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/1519",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"1519"
									]
								}
							},
							"response": []
						},
						{
							"name": "FindByInvalidID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9864c36-f233-404c-92bc-5b9c03d0e911",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Order not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "740ad415-ad50-4dca-8d3c-28c69fc85191",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/15199999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"15199999"
									]
								}
							},
							"response": []
						}
					],
					"id": "cc82b1f5-8461-403a-8777-707a190ffc2c"
				},
				{
					"name": "DeletByOrderID",
					"item": [
						{
							"name": "DeleteByOrderID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4860ab09-c519-4ddf-84cd-3b9592dc630f",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test(\"Code is correct\", function () {\r",
											"    // @allure.step=Validate response code\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"1519\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "453a9395-dd9d-46a2-91cd-37c73055f613",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/1519",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"1519"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteByWrongID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "577096ab-91cf-4a81-affa-b98ef5c1f77d",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test(\"Code is correct\", function () {\r",
											"    // @allure.step=Validate response code\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Order Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dad3b099-9848-4b3f-ba69-c831577f0bb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/151999999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"151999999"
									]
								}
							},
							"response": []
						}
					],
					"id": "75c85ee5-bd09-4527-9ae5-8901d2466761"
				},
				{
					"name": "GetStoreInventory",
					"item": [
						{
							"name": "ReturnsStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "246c44e3-3aa7-46f4-8704-7d55f5a462cf",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Sold field is present\", function () {\r",
											"    // @allure.step=Validate Sold field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('sold');\r",
											"});\r",
											"\r",
											"pm.test(\"Pending field is present\", function () {\r",
											"    // @allure.step=Validate Pending field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('pending');\r",
											"});\r",
											"\r",
											"pm.test(\"Available field is present\", function () {\r",
											"    // @allure.step=Validate Available field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('available');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6cdecf4b-3836-45e9-85f5-2040bd45c6a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"response": []
						}
					],
					"id": "6ede8e40-5ea3-4439-b87b-2286c9880693"
				}
			],
			"id": "3d080505-9f40-4a58-87c0-f76da3d4128f",
			"description": "Access to Petstore orders."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "AddNewUser",
					"item": [
						{
							"name": "AddNewUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa49df7-5841-4fbb-99b8-31e902f3f2b4",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bcfcfe60-eb65-40d1-8484-5b8427cdde4c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 7,\r\n  \"username\": \"Fedor\",\r\n  \"firstName\": \"Ivanovich\",\r\n  \"lastName\": \"Ivanov\",\r\n  \"email\": \"string@mail.com\",\r\n  \"password\": \"12345\",\r\n  \"phone\": \"+9999123\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddNewUserArray",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a87d32fb-ea1b-45d6-abc2-f479a498f61b",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=PetAPI\r",
											"// @allure.feature=PetStoreAPI\r",
											"// @allure.story=RetrieveSoldPets\r",
											"// @allure.description=Verify the response structure and content for sold pets\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate response message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"ok\");\r",
											"});\r",
											"\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b754ba36-c014-4db3-a995-ba60bf314fe9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"id\": 121,\r\n    \"username\": \"John\",\r\n    \"firstName\": \"Malchovich\",\r\n    \"lastName\": \"Malchovich\",\r\n    \"email\": \"string@mail.com\",\r\n    \"password\": \"1234\",\r\n    \"phone\": \"+9999\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"id\": 122,\r\n    \"username\": \"Fill\",\r\n    \"firstName\": \"Spenser\",\r\n    \"lastName\": \"Fillovich\",\r\n    \"email\": \"string@mail.com\",\r\n    \"password\": \"123\",\r\n    \"phone\": \"+88888\",\r\n    \"userStatus\": 0\r\n  },\r\n  {\r\n    \"id\": 123,\r\n    \"username\": \"Adam\",\r\n    \"firstName\": \"Adam junior\",\r\n    \"lastName\": \"Black\",\r\n    \"email\": \"string@mail.com\",\r\n    \"password\": \"123\",\r\n    \"phone\": \"+6666\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"response": []
						}
					],
					"id": "98b83da0-3ed3-49a5-a556-504c51b13969"
				},
				{
					"name": "FindByUsername",
					"item": [
						{
							"name": "FindByUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b4645e-0f2b-4f24-bfc4-4813403da77d",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=RetrieveUserDetails\r",
											"// @allure.description=Verify the response structure and content for user details\r",
											"\r",
											"pm.test('Response status code is 200', function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if id field is present\", function () {\r",
											"    // @allure.step=Validate ID field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if username field is present\", function () {\r",
											"    // @allure.step=Validate Username field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if firstName field is present\", function () {\r",
											"    // @allure.step=Validate First Name field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('firstName');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastName field is present\", function () {\r",
											"    // @allure.step=Validate Last Name field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('lastName');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if email field is present\", function () {\r",
											"    // @allure.step=Validate Email field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if password field is present\", function () {\r",
											"    // @allure.step=Validate Password field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('password');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if phone field is present\", function () {\r",
											"    // @allure.step=Validate Phone field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('phone');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if userStatus field is present\", function () {\r",
											"    // @allure.step=Validate User Status field\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('userStatus');\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Username</th>\r",
											"        <th>First Name</th>\r",
											"        <th>Last Name</th>\r",
											"        <th>Email</th>\r",
											"        <th>Password</th>\r",
											"        <th>Phone</th>\r",
											"        <th>User Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.username}}</td>\r",
											"        <td>{{response.firstName}}</td>\r",
											"        <td>{{response.lastName}}</td>\r",
											"        <td>{{response.email}}</td>\r",
											"        <td>{{response.password}}</td>\r",
											"        <td>{{response.phone}}</td>\r",
											"        <td>{{response.userStatus}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "21ced1a5-1abf-4c75-afae-a107784f5f7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/Fedor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"Fedor"
									]
								}
							},
							"response": []
						},
						{
							"name": "FindByWrongUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ae3df08-bdf6-42bc-9c75-2414b0faddbe",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=critical\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=HandleUserNotFound\r",
											"// @allure.description=Verify the response structure and content when user is not found\r",
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate error message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"User not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a2e1085c-05f7-4cb7-847b-50a95714a284",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/Fedorof",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"Fedorof"
									]
								}
							},
							"response": []
						}
					],
					"id": "e282ad61-d9a6-4c52-b4e4-5075f98b8124"
				},
				{
					"name": "UpdateUser",
					"item": [
						{
							"name": "UpdateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e41316aa-9489-4814-84cf-d48aa7704a09",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=CheckResponseStatusCode\r",
											"// @allure.description=Verify the response status code is 200\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Code</th>\r",
											"        <th>Type</th>\r",
											"        <th>Message</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.code}}</td>\r",
											"        <td>{{response.type}}</td>\r",
											"        <td>{{response.message}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cd69b658-cbb5-485e-b02a-f3b7c0bd1176",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 7,\r\n  \"username\": \"Fedor\",\r\n  \"firstName\": \"Fedorov\",\r\n  \"lastName\": \"Ivanov\",\r\n  \"email\": \"string@mail.com\",\r\n  \"password\": \"12345\",\r\n  \"phone\": \"+8988989\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/Fedor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"Fedor"
									]
								}
							},
							"response": []
						}
					],
					"id": "4d49dab0-052e-4ba0-9fcd-1dfc44390aed"
				},
				{
					"name": "UserLogin",
					"item": [
						{
							"name": "Logged",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c03e9ad-7eaa-4c7b-87fa-a913e89bee56",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=CheckResponseStatusCode\r",
											"// @allure.description=Verify the response status code is 200\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=CheckMessageStartsWithExpectedText\r",
											"// @allure.description=Verify the response message starts with expected text\r",
											"\r",
											"pm.test(\"Message starts with expected text\", function () {\r",
											"    // @allure.step=Validate message start\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.match(/^logged in user session/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49e99450-85e1-4c12-8792-b53c7808da53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?&username=Fedor&password=12345",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "username",
											"value": "Fedor"
										},
										{
											"key": "password",
											"value": "12345"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e61a10d4-3fdc-44d7-ab86-ca9b4f98deb5"
				},
				{
					"name": "UserLogOut",
					"item": [
						{
							"name": "LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07ad2c13-713c-44b8-8edf-69b7bb7d534b",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=CheckResponseStatusCode\r",
											"// @allure.description=Verify the response status code is 200\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"ok\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "487f0523-408c-4987-a4a2-a0ee62748810",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"id": "9f5cf260-5582-41ec-b726-e86c8cd41d44"
				},
				{
					"name": "DeleteUser",
					"item": [
						{
							"name": "DeleteUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca6f1049-7758-4332-bd00-df159b5de5e0",
										"exec": [
											"// @allure.label.owner=QAEngineer\r",
											"// @allure.label.severity=normal\r",
											"// @allure.label.tag=UserAPI\r",
											"// @allure.feature=UserAPI\r",
											"// @allure.story=CheckResponseStatusCode\r",
											"// @allure.description=Verify the response status code is 200\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    // @allure.step=Check response status code\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is correct\", function () {\r",
											"    // @allure.step=Validate message\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.equal(\"Fedor\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "94f20191-6015-49ee-ae85-bab58c9ffc87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/Fedor",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"Fedor"
									]
								}
							},
							"response": []
						}
					],
					"id": "554a66d2-1471-4597-8216-088ecbd367ff"
				}
			],
			"id": "62f102c2-d70d-4584-a7d2-fe0b9f64765d",
			"description": "Operations about user."
		}
	]
}