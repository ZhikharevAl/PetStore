{
	"info": {
		"_postman_id": "659364dd-a994-44e6-96f1-933806e893f2",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "14878406-659364dd-a994-44e6-96f1-933806e893f2"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "FindByStatus",
					"item": [
						{
							"name": "petFindByStatusPending",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df6ae327-64c4-4a05-bf53-eebcb132abd5",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"pending\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "31eab1e2-5ed8-4c79-a66e-1ed777b20ad5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90513a3e-1edb-4de2-b5dd-b13b83b1dcf6",
										"exec": [
											"pm.test('Response status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content-type is json\", function () {\r",
											"    const type = pm.response.headers.get('Content-Type');\r",
											"    pm.expect(type).to.include('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is sold\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].status).to.eql(\"sold\");\r",
											"});\r",
											"\r",
											"pm.test(\"Id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('id')) {\r",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Name should be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(pet){\r",
											"        if (pet.hasOwnProperty('name')) {\r",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    \r",
											"    {{#each response}}\r",
											"        <tr>\r",
											"            <td>{{id}}</td>\r",
											"            <td>{{category.id}}</td>\r",
											"            <td>{{category.name}}</td>\r",
											"            <td>{{name}}</td>\r",
											"            <td>{{photoUrls}}</td>\r",
											"            <td>{{tags}}</td>\r",
											"            <td>{{status}}</td>\r",
											"        </tr>\r",
											"    {{/each}}\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "403ee526-3750-4301-aaa4-25aa3952ce97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81dc59c4-85eb-47ab-ae02-58ea165f4f02",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.eql(\"available\");",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('id')) {",
											"            pm.expect(pet.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Id should be a non-negative integer\");",
											"        }",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c6c188ce-9694-4041-9791-f86b627fdf97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status. The request queries pets with the status \"sold\" from the base URL appended with \"/pet/findByStatus\". The response will be in JSON format and will contain an array of pet objects with their corresponding details such as ID, category, name, photo URLs, tags, and status.\n\nExample:\n```json\n[\n    {\n        \"id\": 0,\n        \"category\": {\n            \"id\": 0,\n            \"name\": \"\"\n        },\n        \"name\": \"\",\n        \"photoUrls\": [],\n        \"tags\": [],\n        \"status\": \"\"\n    }\n]\n```\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd162ac8-31a8-45f3-95c8-b9b57de98f8c",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or sold\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"sold\", \"Status should be pending or sold\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tags</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.[0].name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f00cf12f-9fac-4afd-86b3-a71b0200ff82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,sold"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusPendingAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "170d90e2-fd8b-419c-9007-24e0188cff21",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is pending or available\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"pending\" || status === \"available\", \"Status should be pending or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Tag ID</th>",
											"        <th>Tag Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{tags.0.id}}</td>",
											"            <td>{{tags.0.name}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a7002f81-e2f3-454e-b655-9b1d61272900",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusSoldAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38f392b6-0fca-4004-a828-a8b8ef5b4657",
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response content-type is json\", function () {",
											"    const type = pm.response.headers.get('Content-Type');",
											"    pm.expect(type).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"pm.test(\"Status is sold or available\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.forEach(function(pet){",
											"        pm.expect(pet.status).to.satisfy((status) => status === \"sold\" || status === \"available\", \"Status should be pending or available\");",
											"    });",
											"});",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet) {",
											"        pm.expect(pet.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"    });",
											"});",
											"",
											"pm.test(\"Name should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(pet){",
											"        if (pet.hasOwnProperty('name')) {",
											"            pm.expect(pet.name).to.be.a('string').and.to.have.lengthOf.at.least(0, \"Name should not be empty\");",
											"        }",
											"    });",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Category ID</th>",
											"        <th>Category Name</th>",
											"        <th>Name</th>",
											"        <th>Photo URLs</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{category.id}}</td>",
											"            <td>{{category.name}}</td>",
											"            <td>{{name}}</td>",
											"            <td>{{photoUrls}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return { response: pm.response.json() }",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b4d3e343-f4ac-4d72-b0b8-8cd3ba1301fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"strictSSL": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold,available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold,available"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve a list of pets based on their status, with \"pending\" as the status parameter. The response returns a JSON array containing the details of the pets that match the specified status.\n\nThe response will include a status code of 200 indicating a successful request, and the content type will be in JSON format. The JSON array will consist of objects representing each pet, with details such as ID, category, name, photo URLs, tags, and status.\n\nTo add documentation for this endpoint, you can provide information on how to use the \"status\" query parameter to filter the list of pets based on their status.\n"
							},
							"response": []
						},
						{
							"name": "petFindByStatusAlive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e951e9f-bb35-46dd-af8c-b810abc63ae3",
										"exec": [
											"pm.test('Response status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "557e23d0-5f74-4889-8b14-e553c865d40f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=alive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "alive"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "bc1b15ca-3573-4a99-bb69-6c62a1a70dee"
				},
				{
					"name": "FindByID",
					"item": [
						{
							"name": "findByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9d5fdb2-9f52-44e5-8e37-525b6555ecd0",
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.category).to.exist;\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.photoUrls).to.exist;\r",
											"    pm.expect(responseData.tags).to.exist;\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category name is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"PhotoUrls array should not be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.photoUrls).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Tags array contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Category ID</th>\r",
											"        <th>Category Name</th>\r",
											"        <th>Name</th>\r",
											"        <th>Photo URLs</th>\r",
											"        <th>Tags</th>\r",
											"        <th>Status</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>{{response.id}}</td>\r",
											"        <td>{{response.category.id}}</td>\r",
											"        <td>{{response.category.name}}</td>\r",
											"        <td>{{response.name}}</td>\r",
											"        <td>{{response.photoUrls}}</td>\r",
											"        <td>{{response.tags}}</td>\r",
											"        <td>{{response.status}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9430e8a4-b3bc-431f-8e2c-fc81704ae8f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByIncorrectID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e3c50e1-c309-45ce-bd9c-3b69dad19314",
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('code');\r",
											"    pm.expect(responseData).to.have.property('type');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4c29b756-ccf9-483e-9a46-1aab4c107306",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/1111111111111111",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"1111111111111111"
									]
								}
							},
							"response": []
						}
					],
					"id": "18df70ae-75ab-4bb6-b097-a075b1574829"
				}
			],
			"id": "4254daab-3a9e-460b-bdfd-bff16939be2b",
			"description": "Everything about your Pets."
		},
		{
			"name": "Store",
			"item": [],
			"id": "f99ac13a-e9d4-4da4-9553-d75087e6fbd9",
			"description": "Access to Petstore orders."
		},
		{
			"name": "User",
			"item": [],
			"id": "6386e409-f2d3-4326-b0bd-38e1e3a9c42d",
			"description": "Operations about user."
		}
	]
}